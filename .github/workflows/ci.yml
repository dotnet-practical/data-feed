name: CI

on:
  push:
    branches: ["master", "DF-*-DB-MIGRATION-*", "DF-*-CI-*"]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: build
    runs-on: ubuntu-22.04
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0.419-alpine3.19

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Restore dependencies'
        run: dotnet restore

      - name: 'Build solution'
        run: dotnet build --configuration Release --no-restore

      - name: 'Publish application'
        run: dotnet publish src/DNQ.DataFeed.Api/DNQ.DataFeed.Api.csproj --configuration Release -o artifacts

      - name: 'Upload artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts/

  unit-test:
    name: unit test
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: 'Download artifacts'
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: .

      - name: 'Setup .NET 6'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: 'Run tests with coverage'
        run: |
          dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
        continue-on-error: false

      - name: 'Install ReportGenerator'
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: 'Add .NET Tools to PATH'
        run: echo "::add-path::${HOME}/.dotnet/tools"

      - name: 'Generate Coverage Report'
        run: |
          reportgenerator -reports:**/coverage.cobertura.xml -targetdir:./coverage/reports -reporttypes:Cobertura

      - name: 'Upload Coverage Report'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage/reports

      - name: 'Code Coverage Summary Report'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: './coverage/reports/Cobertura.xml'
          badge: true
          format: markdown
          output: both

      - name: 'Add Coverage Comment to PR'
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  db-migration:
    if: startsWith(github.ref, 'refs/heads/DF-DB-MIGRATION-')
    name: db migration
    needs: build
    uses: ./.github/workflows/db-migration.yml
    with:
       resource_group_name: rg-datafeed-dev-mysql-central-us
       mysql_service_name: db-datafeed-dev
       env: dev
    secrets: 
       DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
       DIGITALOCEAN_MYSQL: ${{ secrets.DIGITALOCEAN_MYSQL }}

  build-docker:
    name: build docker
    runs-on: ubuntu-22.04
    needs: [unit-test]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: app/
      
      - name: Build image
        run: docker build -t app-datafeed .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600
      
      - name: Set VERSION variable
        run: echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
        
      - name: Tag image
        run: docker tag app-datafeed registry.digitalocean.com/rg-app-datafeed/app-datafeed:${{ env.VERSION }}

      - name: Push image
        run: docker push registry.digitalocean.com/rg-app-datafeed/app-datafeed:${{ env.VERSION }}

  # deploy:
  #   name: deploy
  #   needs: build-docker
  #   runs-on: ubuntu-22.04

  #   steps:
  #     - name: 'Deploy to App Platform'
  #       uses: digitalocean/app_action/deploy@v2
  #       env:
  #        SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
  #       with:
  #        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
